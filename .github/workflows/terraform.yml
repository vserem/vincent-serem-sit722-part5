# This workflow installs the latest version of Terraform CLI and configures the Terraform CLI configuration file
# with an API token for Terraform Cloud (app.terraform.io). On pull request events, this workflow will run
# `terraform init`, `terraform fmt`, and `terraform plan` (speculative plan via Terraform Cloud). On push events
# to the "main" branch, `terraform apply` will be executed.
#
# Documentation for `hashicorp/setup-terraform` is located here: https://github.com/hashicorp/setup-terraform
#
# To use this workflow, you will need to complete the following setup steps.
#
# 1. Create a `main.tf` file in the root of this repository with the `remote` backend and one or more resources defined.
#   Example `main.tf`:
#     # The configuration for the `remote` backend.
#     terraform {
#       backend "remote" {
#         # The name of your Terraform Cloud organization.
#         organization = "example-organization"
#
#         # The name of the Terraform Cloud workspace to store Terraform state files in.
#         workspaces {
#           name = "example-workspace"
#         }
#       }
#     }
#
#     # An example resource that does nothing.
#     resource "null_resource" "example" {
#       triggers = {
#         value = "A example resource that does nothing!"
#       }
#     }
#
#
# 2. Generate a Terraform Cloud user API token and store it as a GitHub secret (e.g. TF_API_TOKEN) on this repository.
#   Documentation:
#     - https://www.terraform.io/docs/cloud/users-teams-organizations/api-tokens.html
#     - https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
#
# 3. Reference the GitHub secret in step using the `hashicorp/setup-terraform` GitHub Action.
#   Example:
#     - name: Setup Terraform
#       uses: hashicorp/setup-terraform@v1
#       with:
#         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

name: "Terraform"

on:
  push:
    branches: ["main"]

permissions:
  contents: read

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Refresh the Terraform state to reflect actual infrastructure
      - name: Terraform Refresh
        run: terraform refresh

      # Import the existing Azure Resources into Terraform state
      # - name: Import Resources
      #   run: |
      #     terraform import azurerm_resource_group.deakinuni "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/LibraryMicroservice"
      #     terraform import azurerm_kubernetes_cluster.cluster "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/LibraryMicroservice/providers/Microsoft.ContainerService/managedClusters/LibraryMicroservice"
      #     terraform import azurerm_container_registry.container_registry "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/LibraryMicroservice/providers/Microsoft.ContainerRegistry/registries/LibraryMicroservice"
      #     terraform import azurerm_role_assignment.role_assignment "/subscriptions/4823b134-9c7a-4610-9248-d6510a327dff/providers/Microsoft.Authorization/roleAssignments/16b44033-1000-45d5-9b85-a1de42b9228b"
      #   continue-on-error: true

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -input=false

        # On push to "main", build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false

      # Capture Terraform Output for ACR Credentials
      - name: Get ACR Credentials
        id: acr_creds
        run: |
          echo "CONTAINER_REGISTRY=$(terraform output -raw acr_login_server)" >> $GITHUB_ENV
          echo "REGISTRY_UN=$(terraform output -raw acr_admin_username)" >> $GITHUB_ENV
          echo "REGISTRY_PW=$(terraform output -raw acr_admin_password)" >> $GITHUB_ENV

      # Trigger deployment workflow
      - name: Trigger Deployment Workflow
        uses: actions/github-script@v6
        with:
          script: |
            const result = await github.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'deploy.yml',
              ref: 'main'
            });
            console.log(result);
